package taskDB;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TASK.
*/
public class TaskDao extends AbstractDao<Task, String> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property StartDate = new Property(3, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property FinishDate = new Property(4, java.util.Date.class, "finishDate", false, "FINISH_DATE");
        public final static Property CreatedOn = new Property(5, java.util.Date.class, "createdOn", false, "CREATED_ON");
        public final static Property ModifiedOn = new Property(6, java.util.Date.class, "modifiedOn", false, "MODIFIED_ON");
        public final static Property Syncronized = new Property(7, Boolean.class, "syncronized", false, "SYNCRONIZED");
        public final static Property NewTask = new Property(8, Boolean.class, "newTask", false, "NEW_TASK");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TASK' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'TITLE' TEXT NOT NULL ," + // 1: title
                "'DESCRIPTION' TEXT NOT NULL ," + // 2: description
                "'START_DATE' INTEGER NOT NULL ," + // 3: startDate
                "'FINISH_DATE' INTEGER NOT NULL ," + // 4: finishDate
                "'CREATED_ON' INTEGER NOT NULL ," + // 5: createdOn
                "'MODIFIED_ON' INTEGER NOT NULL ," + // 6: modifiedOn
                "'SYNCRONIZED' INTEGER," + // 7: syncronized
                "'NEW_TASK' INTEGER);"); // 8: newTask
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TASK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getDescription());
        stmt.bindLong(4, entity.getStartDate().getTime());
        stmt.bindLong(5, entity.getFinishDate().getTime());
        stmt.bindLong(6, entity.getCreatedOn().getTime());
        stmt.bindLong(7, entity.getModifiedOn().getTime());
 
        Boolean syncronized = entity.getSyncronized();
        if (syncronized != null) {
            stmt.bindLong(8, syncronized ? 1l: 0l);
        }
 
        Boolean newTask = entity.getNewTask();
        if (newTask != null) {
            stmt.bindLong(9, newTask ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // description
            new java.util.Date(cursor.getLong(offset + 3)), // startDate
            new java.util.Date(cursor.getLong(offset + 4)), // finishDate
            new java.util.Date(cursor.getLong(offset + 5)), // createdOn
            new java.util.Date(cursor.getLong(offset + 6)), // modifiedOn
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // syncronized
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // newTask
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setDescription(cursor.getString(offset + 2));
        entity.setStartDate(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setFinishDate(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setCreatedOn(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setModifiedOn(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSyncronized(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setNewTask(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Task entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
